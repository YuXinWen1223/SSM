<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">
    <bean id="StudentOne" class="com.spring.ioc.entity.Student">
        <!-- property标签：通过组件类的setXxx()方法给组件对象设置属性
             name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）
             value属性：指定属性值
         -->
        <property name="sid" value="1"/>
        <property name="email" value="123456@qq.com"/>
        <property name="name" value="张三"/>
        <property name="age" value="18"/>
    </bean>
    <!--构造方法赋值-->
    <bean id="StudentTwo" class="com.spring.ioc.entity.Student">
        <!--        注意：
                constructor-arg标签还有两个属性可以进一步描述构造器参数：
                index属性：指定参数所在位置的索引（从0开始）
                name属性：指定参数名
                -->
        <constructor-arg value="1"/>
        <constructor-arg value="李四"/>
        <constructor-arg value="123@qq.com"/>
        <constructor-arg value="20"/>


    </bean>
    <!--set设置非字面量-->
    <bean id="StudentThree" class="com.spring.ioc.entity.Student">
        <!--
        什么是字面量？
        int a = 10;
        声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a
        的时候，我们实际上拿到的值是10。
        而如果a是带引号的：'a'，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面
        量。所以字面量没有引申含义，就是我们看到的这个数据本身。
            -->
        <property name="sid" value="1"/>
        <!--给字段设置null-->
        <property name="email">
            <null/>
        </property>
        <!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 -->
        <!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 -->


        <!-- 解决方案一：使用XML实体来代替 -->
        <!-- <property name="name" value=" &lt;张三&gt;"/>-->


        <!-- 解决方案二：使用CDATA节 -->
        <property name="name">
            <!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 -->
            <!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 -->
            <!-- 所以CDATA节中写什么符号都随意 -->
            <value><![CDATA[<张三>]]></value>
        </property>
        <!--以下写法，为name所赋的值是字符串null-->
        <!--<property name="name" value="null"></property>-->
        <property name="age" value="18"/>
    </bean>
    <!--内联类级赋值-->
    <bean id="StudentFour" class="com.spring.ioc.entity.Student">
        <constructor-arg value="1"/>
        <constructor-arg value="李四"/>
        <constructor-arg value="123@qq.com"/>
        <constructor-arg value="20"/>
        <property name="clazz" ref="clazzOne"></property>
    </bean>
    <!--内联类级赋值2-->
    <bean id="clazzOne" class="com.spring.ioc.entity.Clazz">
        <property name="cid" value="1"/>
        <property name="cname" value="最强王者班"/>
    </bean>
    <bean id="StudentFive" class="com.spring.ioc.entity.Student">
        <constructor-arg value="1"/>
        <constructor-arg value="李四"/>
        <constructor-arg value="123@qq.com"/>
        <constructor-arg value="20"/>
        <property name="clazz">
            <!--内联只能内部访问，外部不能访问-->
            <bean id="clazzTwo" class="com.spring.ioc.entity.Clazz">
                <property name="cid" value="1"/>
                <property name="cname" value="天下无敌班"/>
            </bean>
        </property>
    </bean>
    <!--Array赋值-->
    <bean id="StudentSix" class="com.spring.ioc.entity.Student">
        <constructor-arg value="1"/>
        <constructor-arg value="李四"/>
        <constructor-arg value="123@qq.com"/>
        <constructor-arg value="20"/>
        <property name="clazz">
            <!--内联只能内部访问，外部不能访问-->
            <bean id="clazzTwo" class="com.spring.ioc.entity.Clazz">
                <property name="cid" value="1"/>
                <property name="cname" value="天下无敌班"/>
            </bean>
        </property>
        <property name="hobby">
            <array>
                <value>读书</value>
                <value>写作</value>
                <value>学习</value>
            </array>
        </property>
    </bean>
    <!--多对一 关系List赋值 -->
    <bean id="clazzFour" class="com.spring.ioc.entity.Clazz">
        <property name="cid" value="1"/>
        <property name="cname" value="天下无敌班"/>
        <!--方法一 在list标签中声明ref标签指定beanid-->
        <!--        <property name="students">
                    <list>
                        <ref bean="StudentOne"/>
                        <ref bean="StudentTwo"/>
                    </list>
                </property>-->
        <!--方法二-->
        <property name="students" ref="StudentList">
        </property>
    </bean>
    <!--多对一方法二util标签-->
    <util:list id="StudentList">
        <ref bean="StudentOne"/>
        <ref bean="StudentTwo"/>
    </util:list>
    <bean id="StudentSeven" class="com.spring.ioc.entity.Student">
        <constructor-arg value="1"/>
        <constructor-arg value="李四"/>
        <constructor-arg value="123@qq.com"/>
        <constructor-arg value="20"/>
        <property name="clazz">
            <!--内联只能内部访问，外部不能访问-->
            <bean id="clazzTwo" class="com.spring.ioc.entity.Clazz">
                <property name="cid" value="1"/>
                <property name="cname" value="天下无敌班"/>
            </bean>
        </property>
        <property name="hobby">
            <array>
                <value>读书</value>
                <value>写作</value>
                <value>学习</value>
            </array>
        </property>
        <!--第一种方式-->
        <!--        <property name="teacherMap">
                    <map>
                        <entry key="10086" value-ref="teacherOne"/>
                        <entry key="10010" value-ref="teacherTwo"/>
                    </map>
                </property>-->
        <!--第二种方式-->
        <property name="teacherMap" ref="teacherMapOne">
        </property>
    </bean>
    <bean id="teacherOne" class="com.spring.ioc.entity.Teacher">
        <property name="tid" value="10086"/>
        <property name="tname" value="帅哥"/>
    </bean>
    <bean id="teacherTwo" class="com.spring.ioc.entity.Teacher">
        <property name="tid" value="10010"/>
        <property name="tname" value="美女"/>
    </bean>
    <util:map id="teacherMapOne">
        <entry key="10086" value-ref="teacherOne"/>
        <entry key="10010" value-ref="teacherTwo"/>
    </util:map>
    <bean id="StudentEight" class="com.spring.ioc.entity.Student"
          p:name="赵六" p:age="19" p:cid="1001" p:email="838834@qq.com"
          p:clazz-ref="clazzOne" p:teacherMap-ref="teacherMapOne"/>

</beans>
